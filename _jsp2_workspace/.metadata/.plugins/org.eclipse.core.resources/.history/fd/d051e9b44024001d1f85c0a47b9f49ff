package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import service.BoardService;
import service.BoardServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    //로그기록 파일
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private String destPage;	//목적지 위치 기록
	private RequestDispatcher rdp;
	private BoardService bsv;
	private int isUp;

    public BoardController() {
        bsv = new BoardServiceImpl(); //bsv를 구현할 class BoardServiceImpl생성 -> 저장 
        
    }


	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");	// req, res encoding설정
		res.setCharacterEncoding("utf-8");
		res.setContentType("text/html; charset=utf-8");
		
		String uri = req.getRequestURI();	// /brd/insert 주소를 uri로 받음.
		String path = uri.substring(uri.lastIndexOf("/")+1); //마지막 기능만 추출 insert
		
		switch(path) {
		case "register":
			//register -> 글쓰기 페이지를 출력(보여주기)
			destPage = "/brd/register.jsp";	//웹 board폴더의 registe.jsp 파일 경로 실어서 보냄.
			System.out.println(">>> path " + path);
			log.info(">>> path " + path);
			break;
		case "insert":
			//insert -> 글쓰기 등록 버튼을 눌렀을 때 글을 등록 후 -> list 페이지로 이동
			try {
				String title = req.getParameter("title");
				String writer = req.getParameter("writer");
				String content = req.getParameter("content");
				System.out.println("check 1");
				System.out.println(">>> path " + path);
				isUp = bsv.register(new BoardVO(title, writer, content));
				System.out.println("check 4");
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("insert 실패");
			}
			break;
		case "list":
			//list -> list 페이지 출력
			try {
				List<BoardVO> list = bsv.getList();
				System.out.println("check 2-1");
				destPage = "/board/list/jsp";
				req.setAttribute("list", list);
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "detail":
			break;
		case "modify":
			break;
		case "update":
			break;
		case "remove":
			break;
		}
		
		rdp = req.getRequestDispatcher(destPage); //목적지 경로로 응답함.
		rdp.forward(req, res);	//요청과 응답을 받아서 보냄.
	}


	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response); //get방식으로 요청하는 값을 위의 서비스 메서드를 불러와서 요청, 응답함.
		
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response); //get방식으로 요청하는 값을 위의 서비스 메서드를 불러와서 요청, 응답함.
	}

}
